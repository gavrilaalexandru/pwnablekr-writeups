The challenge presents us with a program that expects a numeric key input. If the input equals the sum of the return values
 from three functions (key1, key2, and key3), we get the flag.

Looking at the C code, the key check is:

if( (key1()+key2()+key3()) == key ){
    // print flag
}

Each of these functions manipulates specific ARM registers. Let's analyze what they do to determine the expected key value.

key1()
int key1(){
    asm("mov r3, pc\n");
}

In the disassembly:
0x00008cdc <+8>:     mov     r3, pc
0x00008ce0 <+12>:    mov     r0, r3

This function moves the Program Counter (PC) into r3, then into r0 (the return value). In ARM architecture, PC points to the
current instruction plus 8 bytes in ARM mode. So when executing at 0x00008cdc, PC contains 0x00008cdc + 8 = 0x00008ce4.

Therefore, key1() returns 0x00008ce4 (36068).

key2()
int key2(){
    asm(
    "push    {r6}\n"
    "add     r6, pc, $1\n"
    "bx      r6\n"
    ".code   16\n"
    "mov     r3, pc\n"
    "add     r3, $0x4\n"
    "push    {r3}\n"
    "pop     {pc}\n"
    ".code   32\n"
    "pop     {r6}\n"
    );
}

This function is more complex as it switches between ARM mode and Thumb mode:

1. It adds 1 to PC and branches to that address with BX, which switches to Thumb mode
2. In Thumb mode, it moves PC to r3
3. Adds 4 to r3
4. Then returns to ARM mode

From the disassembly:
0x00008d04 <+20>:    mov     r3, pc      ; In Thumb mode
0x00008d06 <+22>:    adds    r3, #4

In Thumb mode, PC contains the current instruction address + 4. So at 0x00008d04, PC = 0x00008d08.
After adding 4, r3 = 0x00008d0c.

Therefore, key2() returns 0x00008d0c (36108).

key3()
int key3(){
    asm("mov r3, lr\n");
}

In the disassembly:
0x00008d28 <+8>:     mov     r3, lr
0x00008d2c <+12>:    mov     r0, r3

This function moves the Link Register (LR) into r3, then into r0. The LR holds the return address after a function call.

Looking at main:
0x00008d7c <+64>:    bl      0x8d20 <key3>
0x00008d80 <+68>:    mov     r3, r0

The `bl` instruction at 0x00008d7c calls key3() and stores the next instruction address (0x00008d80) in LR.

Therefore, key3() returns 0x00008d80 (36224).

Calculating the Key

The expected key is the sum of the three function return values:

key = key1() + key2() + key3()
key = 0x00008ce4 + 0x00008d0c + 0x00008d80
key = 36068 + 36108 + 36224
key = 108400 (decimal) or 0x1A770 (hex)
